(function(s,t){typeof exports=="object"&&typeof module<"u"?t(exports):typeof define=="function"&&define.amd?define(["exports"],t):(s=typeof globalThis<"u"?globalThis:s||self,t(s["window-reference-manager"]={}))})(this,function(s){"use strict";var a=Object.defineProperty;var f=(s,t,o)=>t in s?a(s,t,{enumerable:!0,configurable:!0,writable:!0,value:o}):s[t]=o;var i=(s,t,o)=>(f(s,typeof t!="symbol"?t+"":t,o),o);class t{constructor(e="",r="",n=null){i(this,"storeNamespace","windowReferenceStore");i(this,"storeName","");i(this,"root",typeof window<"u"?window:typeof global<"u"?global:typeof document<"u"?document:{});if(r?this.storeNamespace=r:console.info("It's recommended to assign a namespace for your stores"),e)this.storeName=e;else{console.error("A store name needs to be specified. Initiation aborted in WindowReferenceStore");return}n!==null&&(this.root=n),this.registerGlobalReferences()}registerGlobalReferences(){typeof this.root[this.storeNamespace]>"u"&&(this.root[this.storeNamespace]={}),typeof this.root[this.storeNamespace][this.storeName]>"u"&&(this.root[this.storeNamespace][this.storeName]={})}has(e){return e?typeof this.root[this.storeNamespace][this.storeName][e]<"u":(console.log(`Attempted to fetch an empty key. Reference store namespace: ${this.storeNamespace}. Reference store name: ${this.storeName}`),!1)}get(e){return this.has(e)?this.root[this.storeNamespace][this.storeName][e]:(console.log(`Could not find reference ${e} in store ${this.storeNamespace} ${this.storeName}`),!1)}set(e,r,n=!1){if(this.has(e)&&!n)return console.warn(`Reference '${e}' already exists in store '${this.storeName}' and override wasn't enabled`),!1;if(typeof r>"u")return console.error(`Can't register a undefined object to store ${this.storeName}`),!1;try{return this.root[this.storeNamespace][this.storeName][e]=r,!0}catch{return!1}}remove(e){return this.has(e)?delete this.root[this.storeNamespace][this.storeName][e]:!1}}s.WindowReferenceStore=t,Object.defineProperty(s,Symbol.toStringTag,{value:"Module"})});
